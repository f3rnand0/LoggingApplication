package demo.appactlog.service;

import java.lang.reflect.Method;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import demo.appactlog.dto.LogServiceMethod;

public class AppActivityService {

	static final Logger loggerAppA = LoggerFactory.getLogger("AppA");
	static final Logger loggerAppB = LoggerFactory.getLogger("AppB");

	static final Map<String, LogServiceMethod> serviceMethodMap;

	static {
		Map<String, LogServiceMethod> aMap = new HashMap<>();
		// aMap.put("AppA", (activity, activityType) -> logAppA(activity, activityType));
		aMap.put("AppA", new LogServiceMethod() {
			public void execute(String activity, String activityType) {
				logAppA(activity, activityType);
			}
		});
		aMap.put("AppB", (activity, activityType) -> logAppB(activity, activityType));
		serviceMethodMap = Collections.unmodifiableMap(aMap);
	}

	public static void log(String applicationName, String activity, String activityType) {

		final LogServiceMethod serviceMethod = serviceMethodMap.get(applicationName);
		if (serviceMethod != null) {
			System.out.println("Entro a if");
			try {
				Method[] m = serviceMethod.getClass().getDeclaredMethods();
				for (int i = 0; i < m.length; i++)
					System.out.println("method: " + m[i].toString());
			} catch (Throwable e) {
				System.err.println(e);
			}

			serviceMethod.execute(activity, activityType);
		} else {
			System.out.println("Entro a else");
			System.out.println(new StringBuffer("Application name: ").append(applicationName)
					.append(", Activity: ").append(activity).append(", Activity type: ")
					.append(activityType).toString());
		}
	}

	private static void logAppA(String activity, String activityType) {
		System.out.println("Entro a logAppA, act:" + activity + ", actType: " + activityType);
		switch (activityType.toLowerCase()) {
		case "info":
			loggerAppA.info(activity);
			break;
		case "error":
			loggerAppA.error(activity);
			break;
		case "debug":
			loggerAppA.debug(activity);
			break;
		default:
			loggerAppA.info(activity);
			break;
		}
	}

	private static void logAppB(String activity, String activityType) {
		System.out.println("Entro a logAppB");
		switch (activityType.toLowerCase()) {
		case "info":
			loggerAppB.info(activity);
			break;
		case "error":
			loggerAppB.error(activity);
			break;
		case "debug":
			loggerAppB.debug(activity);
			break;
		default:
			loggerAppB.info(activity);
			break;
		}
	}
}
